// Copyright 2016 Hippo B.V. (http://www.onehippo.com)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@import 'variables';

@mixin overlay-position() {
  bottom: 0;
  left: 0;
  pointer-events: none;
  position: absolute;
  right: 0;
  top: 0;
}

@mixin overlay-border($suffix:"") {
  border-style: solid unquote($suffix);
  border-width: 1px unquote($suffix);
}

@mixin overlay-border-component($suffix:"") {
  border-color: $blue unquote($suffix);
  box-shadow: inset 0 0 0 1px $half-white unquote($suffix);
}

@mixin overlay-border-container() {
  border-color: $black;
  box-shadow: inset 0 0 0 1px $half-white;
}

.overlay {
  @include overlay-position();
}

overlay-element {
  @include overlay-border();
  box-sizing: border-box;
  pointer-events: auto;
  position: absolute;

  &.overlay-permeable {
    pointer-events: none;
  }
}

.overlay-label {
  border: 1px solid $half-white;
  color: $white;
  font-size: 12px;
  height: 26px;
  left: 0;
  position: absolute;
  top: 0;
  display: none;

  .overlay-label-text {
    padding: 0 6px;
    display: none;
  }

  .overlay-label-icon {
    color: $white;
    display: none;
  }
}

.overlay-element-container {
  @include overlay-border-container();
  display: none;
  z-index: 10;

  > .overlay-label {
    background: $black;
    display: none;
  }

  &-visible {
    display: block;
  }

  &.overlay-label-visible {
    > .overlay-label {
      display: flex;

      .overlay-label-text {
        display: inline;
      }
    }
  }
}

.overlay-element-component {
  @include overlay-border-component();
  display: none;
  cursor: pointer;

  > .overlay-label {
    background: $blue;
  }

  &:hover {
    box-shadow: inset 0 0 0 1px $half-white, inset 0 0 160px 1px $blue-shadow;

    > .overlay-label {
      display: flex; // show label unconditionally...

      .overlay-label-text {
        display: inline; // ...including text.
      }
    }
  }

  &-visible {
    display: block;

    > .overlay-label.overlay-label-with-icon {
      display: flex; // if the label has an icon, it should always be shown.

      .overlay-label-icon {
        display: inline;
      }
    }
  }
}

.overlay-lock-icon {
  background: $black;
  color: white;
  cursor: default;
  float: right;
  // prevent the on-hover effect of a component against a container's edge by shifting the lock icon 1px up and right
  margin-top: -1px;
  margin-right: -1px;
  pointer-events: all;
}

.overlay-lock-tooltip ._md-content {
  // make 'lock' tooltips black without transparency so the channel does not shine through
  background-color: #000 !important;
}

.channel-dragula-mirror {
  @include overlay-position();

  > .gu-mirror {
    @include overlay-border('!important');
    @include overlay-border-component('!important');
    overflow: hidden !important;
    position: absolute !important;
    pointer-events: none !important;
  }
}

.add-mode {
  // make dragging go smooth by capturing mouse-move events in the entire overlay
  &.overlay {
    pointer-events: auto;
  }

  // in add mode, hide all component overlays...
  .overlay-element-component {
    display: none;
  }

  // ...and show all container overlays
  .overlay-element-container {
    display: block;

    & .overlay-label {
      display: flex;

      .overlay-label-text {
        display: inline;
      }
    }

    // highlight the container when dragging the component over it
    &.has-shadow {
      box-shadow: inset 0 0 0 1px $half-white, inset 0 0 160px 1px $black-shadow;
    }
  }

}
